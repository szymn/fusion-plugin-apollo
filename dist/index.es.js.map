{"version":3,"file":"index.es.js","sources":["../src/server.js","../src/tokens.js","../src/plugin.js","../src/apollo-client/index.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport {getDataFromTree} from 'react-apollo';\nimport type {Logger} from 'fusion-tokens';\n\nimport type {Element} from 'react';\n\n// Apollo currently does not have an effective error policy for server side rendering (see https://github.com/apollographql/react-apollo/issues/2680)\n// This render function first tries to use `renderToStringWithData`. If any query in this render function fails, we will catch the error, log it, and\n// fall back to a standard renderToString, which will set the `loading` props of all queries which failed to execute in the first pass to true.\n// This allows us to still render with data in the happy case, and defer to client side rendering if any queries fail. This also acts as a form\n// of retrying from the browser.\nexport default (root: Element<*>, logger?: Logger) => {\n  return getDataFromTree(root).catch(e => {\n    logger && logger.error('SSR Failed with Error', e);\n  });\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport React from 'react';\nimport {createToken, type Context, type Token} from 'fusion-core';\nimport type {ApolloClient} from 'apollo-client';\n\nexport type InitApolloClientType<TInitialState> = (\n  ctx: Context,\n  initialState: TInitialState\n) => ApolloClient<TInitialState>;\n\n// We should have better flow types for the schema\nexport const GraphQLSchemaToken: Token<any> = createToken('GraphQlSchemaToken');\n\nexport type ApolloContext<T> = Context => T | T;\n\nexport const ApolloContextToken: Token<ApolloContext<mixed>> = createToken(\n  'ApolloContextToken'\n);\n\nexport const ApolloCacheContext = React.createContext<\n  $PropertyType<InitApolloClientType<mixed>, 'cache'>\n>();\n\nexport const GraphQLEndpointToken: Token<string> = createToken(\n  'GraphQLEndpointToken'\n);\n\nexport const ApolloClientToken: Token<\n  InitApolloClientType<mixed>\n> = createToken('ApolloClientToken');\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport React from 'react';\n\nimport {createPlugin, html, unescape} from 'fusion-core';\n\nimport {ApolloProvider} from 'react-apollo';\n\nimport type {Context, Render} from 'fusion-core';\n\nimport serverRender from './server';\nimport {LoggerToken} from 'fusion-tokens';\nimport {ApolloServer} from 'apollo-server-koa';\nimport compose from 'koa-compose';\nimport {\n  ApolloContextToken,\n  ApolloCacheContext,\n  GraphQLSchemaToken,\n  GraphQLEndpointToken,\n  ApolloClientToken,\n} from './tokens';\n\nexport type DepsType = {\n  apolloContext: typeof ApolloContextToken.optional,\n  logger: typeof LoggerToken.optional,\n  schema: typeof GraphQLSchemaToken.optional,\n  endpoint: typeof GraphQLEndpointToken.optional,\n  getApolloClient: typeof ApolloClientToken,\n};\n\nexport type ProvidesType = (el: any, ctx: Context) => Promise<any>;\n\nfunction getDeps(): DepsType {\n  if (__NODE__) {\n    return {\n      apolloContext: ApolloContextToken.optional,\n      logger: LoggerToken.optional,\n      schema: GraphQLSchemaToken.optional,\n      endpoint: GraphQLEndpointToken.optional,\n      getApolloClient: ApolloClientToken,\n    };\n  }\n  // $FlowFixMe\n  return {\n    getApolloClient: ApolloClientToken,\n  };\n}\n\nexport default (renderFn: Render) =>\n  createPlugin<DepsType, ProvidesType>({\n    deps: getDeps(),\n    provides(deps) {\n      if (__BROWSER__) {\n        return renderFn;\n      }\n      return (el, ctx) => {\n        return serverRender(el, deps.logger).then(() => {\n          return renderFn(el, ctx);\n        });\n      };\n    },\n    middleware({\n      schema,\n      endpoint = '/graphql',\n      getApolloClient,\n      apolloContext = ctx => {\n        return ctx;\n      },\n    }) {\n      const renderMiddleware = async (ctx, next) => {\n        if (!ctx.element) {\n          return next();\n        }\n        let initialState = null;\n        if (__BROWSER__) {\n          // Deserialize initial state for the browser\n          const apolloState = document.getElementById('__APOLLO_STATE__');\n          if (apolloState) {\n            initialState = JSON.parse(unescape(apolloState.textContent));\n          }\n        }\n        // Create the client and apollo provider\n        const client = getApolloClient(ctx, initialState);\n        ctx.element = (\n          <ApolloCacheContext.Provider value={client.cache}>\n            <ApolloProvider client={client}>{ctx.element}</ApolloProvider>\n          </ApolloCacheContext.Provider>\n        );\n\n        await next();\n\n        if (__NODE__) {\n          // Serialize state into html on server side render\n          const initialState = client.cache && client.cache.extract();\n          const serialized = JSON.stringify(initialState);\n          console.log(serialized);\n          const script = html`\n            <script type=\"application/json\" id=\"__APOLLO_STATE__\">\n              ${serialized}\n            </script>\n          `;\n          ctx.template.body.push(script);\n        }\n      };\n      if (__NODE__ && schema) {\n        const server = new ApolloServer({\n          schema,\n          // investigate other options\n          context: ({ctx}) => {\n            if (typeof apolloContext === 'function') {\n              return apolloContext(ctx);\n            }\n            return apolloContext;\n          },\n        });\n        let serverMiddleware = [];\n        server.applyMiddleware({\n          // switch to server.getMiddleware once https://github.com/apollographql/apollo-server/pull/2435 lands\n          app: {\n            use: m => {\n              serverMiddleware.push(m);\n            },\n          },\n          // investigate other options\n          path: endpoint,\n        });\n        return compose([...serverMiddleware, renderMiddleware]);\n      } else {\n        return renderMiddleware;\n      }\n    },\n  });\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {createPlugin, createToken} from 'fusion-core';\nimport {FetchToken} from 'fusion-tokens';\nimport {\n  GraphQLSchemaToken,\n  ApolloContextToken,\n  GraphQLEndpointToken,\n} from '../tokens';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {from as apolloLinkFrom} from 'apollo-link';\nimport {SchemaLink} from 'apollo-link-schema';\nimport type {ApolloCache, ApolloClientOptions} from 'apollo-client';\n\nimport type {Context, FusionPlugin, Token} from 'fusion-core';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nexport const GetApolloClientCacheToken: Token<\n  (ctx: Context) => ApolloCache<mixed>\n> = createToken('GetApolloClientCacheToken');\n\nexport const ApolloClientCredentialsToken: Token<string> = createToken(\n  'ApolloClientCredentialsToken'\n);\n\nexport const ApolloClientDefaultOptionsToken: Token<\n  $PropertyType<ApolloClientOptions<any>, 'defaultOptions'>\n> = createToken('ApolloClientDefaultOptionsToken');\n\ntype ApolloLinkType = {request: (operation: any, forward: any) => any};\n\nexport const GetApolloClientLinksToken: Token<\n  (Array<ApolloLinkType>, ctx: Context) => Array<ApolloLinkType>\n> = createToken('GetApolloClientLinksToken');\n\nexport const ApolloClientResolversToken: Token<\n  ResolverMapType | $ReadOnlyArray<ResolverMapType>\n> = createToken('ApolloClientResolversToken');\n\ntype ResolverMapType = {\n  +[key: string]: {\n    +[field: string]: (\n      rootValue?: any,\n      args?: any,\n      context?: any,\n      info?: any\n    ) => any,\n  },\n};\n\ntype ApolloClientDepsType = {\n  getCache: typeof GetApolloClientCacheToken.optional,\n  endpoint: typeof GraphQLEndpointToken.optional,\n  fetch: typeof FetchToken,\n  includeCredentials: typeof ApolloClientCredentialsToken.optional,\n  apolloContext: typeof ApolloContextToken.optional,\n  getApolloLinks: typeof GetApolloClientLinksToken.optional,\n  schema: typeof GraphQLSchemaToken.optional,\n  resolvers: typeof ApolloClientResolversToken.optional,\n  defaultOptions: typeof ApolloClientDefaultOptionsToken.optional,\n};\n\ntype InitApolloClientType = (\n  ctx: Context,\n  initialState: mixed\n) => ApolloClient<mixed>;\n\nfunction Container() {}\n\nconst ApolloClientPlugin: FusionPlugin<\n  ApolloClientDepsType,\n  InitApolloClientType\n> = createPlugin({\n  deps: {\n    getCache: GetApolloClientCacheToken.optional,\n    endpoint: GraphQLEndpointToken.optional,\n    fetch: FetchToken,\n    includeCredentials: ApolloClientCredentialsToken.optional,\n    apolloContext: ApolloContextToken.optional,\n    getApolloLinks: GetApolloClientLinksToken.optional,\n    schema: GraphQLSchemaToken.optional,\n    resolvers: ApolloClientResolversToken.optional,\n    defaultOptions: ApolloClientDefaultOptionsToken.optional,\n  },\n  provides({\n    getCache = ctx => new InMemoryCache(),\n    endpoint = '/graphql',\n    fetch,\n    includeCredentials = 'same-origin',\n    apolloContext = ctx => ctx,\n    getApolloLinks,\n    schema,\n    resolvers,\n    defaultOptions,\n  }) {\n    function getClient(ctx, initialState) {\n      const cache = getCache(ctx);\n      const connectionLink =\n        schema && __NODE__\n          ? new SchemaLink({\n              schema,\n              context:\n                typeof apolloContext === 'function'\n                  ? apolloContext(ctx)\n                  : apolloContext,\n            })\n          : new HttpLink({\n              uri: endpoint,\n              credentials: includeCredentials,\n              fetch,\n            });\n\n      const links: Array<ApolloLinkType> = getApolloLinks\n        ? getApolloLinks([connectionLink], ctx)\n        : [connectionLink];\n\n      const client = new ApolloClient({\n        ssrMode: __NODE__,\n        connectToDevTools: __BROWSER__ && __DEV__,\n        link: apolloLinkFrom(links),\n        cache: cache.restore(initialState),\n        resolvers,\n        defaultOptions,\n      });\n      return client;\n    }\n    return (ctx: Context, initialState: mixed) => {\n      if (ctx.memoized.has(Container)) {\n        return ctx.memoized.get(Container);\n      }\n      const client = getClient(ctx, initialState);\n      ctx.memoized.set(Container, client);\n      return client;\n    };\n  },\n});\nexport {ApolloClientPlugin};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {DocumentNode} from 'graphql';\nimport ApolloRenderEnhancer from './plugin';\n\nexport * from './tokens.js';\nexport * from './apollo-client/index.js';\n\nexport {ApolloRenderEnhancer};\n\nexport function gql(path: string): DocumentNode {\n  throw new Error('fusion-plugin-apollo/gql should be replaced at build time');\n}\n"],"names":["root","logger","getDataFromTree","catch","e","error","GraphQLSchemaToken","createToken","ApolloContextToken","ApolloCacheContext","React","createContext","GraphQLEndpointToken","ApolloClientToken","getDeps","apolloContext","optional","LoggerToken","schema","endpoint","getApolloClient","renderFn","createPlugin","deps","provides","el","ctx","serverRender","then","middleware","renderMiddleware","next","element","initialState","client","cache","extract","serialized","JSON","stringify","console","log","script","html","template","body","push","server","ApolloServer","context","serverMiddleware","applyMiddleware","app","use","m","path","compose","GetApolloClientCacheToken","ApolloClientCredentialsToken","ApolloClientDefaultOptionsToken","GetApolloClientLinksToken","ApolloClientResolversToken","Container","ApolloClientPlugin","getCache","fetch","FetchToken","includeCredentials","getApolloLinks","resolvers","defaultOptions","InMemoryCache","getClient","connectionLink","SchemaLink","HttpLink","uri","credentials","links","ApolloClient","ssrMode","connectToDevTools","link","apolloLinkFrom","restore","memoized","has","get","set","gql","Error"],"mappings":"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"}