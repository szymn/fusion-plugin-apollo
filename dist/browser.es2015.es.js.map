{"version":3,"file":"browser.es2015.es.js","sources":["../src/server.js","../src/tokens.js","../src/plugin.js","../src/apollo-client/index.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport {getDataFromTree} from 'react-apollo';\nimport type {Logger} from 'fusion-tokens';\n\nimport type {Element} from 'react';\n\n// Apollo currently does not have an effective error policy for server side rendering (see https://github.com/apollographql/react-apollo/issues/2680)\n// This render function first tries to use `renderToStringWithData`. If any query in this render function fails, we will catch the error, log it, and\n// fall back to a standard renderToString, which will set the `loading` props of all queries which failed to execute in the first pass to true.\n// This allows us to still render with data in the happy case, and defer to client side rendering if any queries fail. This also acts as a form\n// of retrying from the browser.\nexport default (root: Element<*>, logger?: Logger) => {\n  return getDataFromTree(root).catch(e => {\n    logger && logger.error('SSR Failed with Error', e);\n  });\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport React from 'react';\nimport {createToken, type Context, type Token} from 'fusion-core';\nimport type {ApolloClient} from 'apollo-client';\n\nexport type InitApolloClientType<TInitialState> = (\n  ctx: Context,\n  initialState: TInitialState\n) => ApolloClient<TInitialState>;\n\n// We should have better flow types for the schema\nexport const GraphQLSchemaToken: Token<any> = createToken('GraphQlSchemaToken');\n\nexport type ApolloContext<T> = Context => T | T;\n\nexport const ApolloContextToken: Token<ApolloContext<mixed>> = createToken(\n  'ApolloContextToken'\n);\n\nexport const ApolloCacheContext = React.createContext<\n  $PropertyType<InitApolloClientType<mixed>, 'cache'>\n>();\n\nexport const GraphQLEndpointToken: Token<string> = createToken(\n  'GraphQLEndpointToken'\n);\n\nexport const ApolloClientToken: Token<\n  InitApolloClientType<mixed>\n> = createToken('ApolloClientToken');\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport React from 'react';\n\nimport {createPlugin, html, unescape} from 'fusion-core';\n\nimport {ApolloProvider} from 'react-apollo';\n\nimport type {Context, Render} from 'fusion-core';\n\nimport serverRender from './server';\nimport {LoggerToken} from 'fusion-tokens';\nimport {ApolloServer} from 'apollo-server-koa';\nimport compose from 'koa-compose';\nimport {\n  ApolloContextToken,\n  ApolloCacheContext,\n  GraphQLSchemaToken,\n  GraphQLEndpointToken,\n  ApolloClientToken,\n} from './tokens';\n\nexport type DepsType = {\n  apolloContext: typeof ApolloContextToken.optional,\n  logger: typeof LoggerToken.optional,\n  schema: typeof GraphQLSchemaToken.optional,\n  endpoint: typeof GraphQLEndpointToken.optional,\n  getApolloClient: typeof ApolloClientToken,\n};\n\nexport type ProvidesType = (el: any, ctx: Context) => Promise<any>;\n\nfunction getDeps(): DepsType {\n  if (__NODE__) {\n    return {\n      apolloContext: ApolloContextToken.optional,\n      logger: LoggerToken.optional,\n      schema: GraphQLSchemaToken.optional,\n      endpoint: GraphQLEndpointToken.optional,\n      getApolloClient: ApolloClientToken,\n    };\n  }\n  // $FlowFixMe\n  return {\n    getApolloClient: ApolloClientToken,\n  };\n}\n\nexport default (renderFn: Render) =>\n  createPlugin<DepsType, ProvidesType>({\n    deps: getDeps(),\n    provides(deps) {\n      if (__BROWSER__) {\n        return renderFn;\n      }\n      return (el, ctx) => {\n        return serverRender(el, deps.logger).then(() => {\n          return renderFn(el, ctx);\n        });\n      };\n    },\n    middleware({\n      schema,\n      endpoint = '/graphql',\n      getApolloClient,\n      apolloContext = ctx => {\n        return ctx;\n      },\n    }) {\n      const renderMiddleware = async (ctx, next) => {\n        if (!ctx.element) {\n          return next();\n        }\n        let initialState = null;\n        if (__BROWSER__) {\n          // Deserialize initial state for the browser\n          const apolloState = document.getElementById('__APOLLO_STATE__');\n          if (apolloState) {\n            initialState = JSON.parse(unescape(apolloState.textContent));\n          }\n        }\n        // Create the client and apollo provider\n        const client = getApolloClient(ctx, initialState);\n        ctx.element = (\n          <ApolloCacheContext.Provider value={client.cache}>\n            <ApolloProvider client={client}>{ctx.element}</ApolloProvider>\n          </ApolloCacheContext.Provider>\n        );\n\n        await next();\n\n        if (__NODE__) {\n          // Serialize state into html on server side render\n          const initialState = client.cache && client.cache.extract();\n          const serialized = JSON.stringify(initialState);\n          const script = html`\n            <script type=\"application/json\" id=\"__APOLLO_STATE__\">\n              ${String(serialized)}\n            </script>\n          `;\n          ctx.template.body.push(script);\n        }\n      };\n      if (__NODE__ && schema) {\n        const server = new ApolloServer({\n          schema,\n          // investigate other options\n          context: ({ctx}) => {\n            if (typeof apolloContext === 'function') {\n              return apolloContext(ctx);\n            }\n            return apolloContext;\n          },\n        });\n        let serverMiddleware = [];\n        server.applyMiddleware({\n          // switch to server.getMiddleware once https://github.com/apollographql/apollo-server/pull/2435 lands\n          app: {\n            use: m => {\n              serverMiddleware.push(m);\n            },\n          },\n          // investigate other options\n          path: endpoint,\n        });\n        return compose([...serverMiddleware, renderMiddleware]);\n      } else {\n        return renderMiddleware;\n      }\n    },\n  });\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {createPlugin, createToken} from 'fusion-core';\nimport {FetchToken} from 'fusion-tokens';\nimport {\n  GraphQLSchemaToken,\n  ApolloContextToken,\n  GraphQLEndpointToken,\n} from '../tokens';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {from as apolloLinkFrom} from 'apollo-link';\nimport {SchemaLink} from 'apollo-link-schema';\nimport type {ApolloCache, ApolloClientOptions} from 'apollo-client';\n\nimport type {Context, FusionPlugin, Token} from 'fusion-core';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nexport const GetApolloClientCacheToken: Token<\n  (ctx: Context) => ApolloCache<mixed>\n> = createToken('GetApolloClientCacheToken');\n\nexport const ApolloClientCredentialsToken: Token<string> = createToken(\n  'ApolloClientCredentialsToken'\n);\n\nexport const ApolloClientDefaultOptionsToken: Token<\n  $PropertyType<ApolloClientOptions<any>, 'defaultOptions'>\n> = createToken('ApolloClientDefaultOptionsToken');\n\ntype ApolloLinkType = {request: (operation: any, forward: any) => any};\n\nexport const GetApolloClientLinksToken: Token<\n  (Array<ApolloLinkType>, ctx: Context) => Array<ApolloLinkType>\n> = createToken('GetApolloClientLinksToken');\n\nexport const ApolloClientResolversToken: Token<\n  ResolverMapType | $ReadOnlyArray<ResolverMapType>\n> = createToken('ApolloClientResolversToken');\n\ntype ResolverMapType = {\n  +[key: string]: {\n    +[field: string]: (\n      rootValue?: any,\n      args?: any,\n      context?: any,\n      info?: any\n    ) => any,\n  },\n};\n\ntype ApolloClientDepsType = {\n  getCache: typeof GetApolloClientCacheToken.optional,\n  endpoint: typeof GraphQLEndpointToken.optional,\n  fetch: typeof FetchToken,\n  includeCredentials: typeof ApolloClientCredentialsToken.optional,\n  apolloContext: typeof ApolloContextToken.optional,\n  getApolloLinks: typeof GetApolloClientLinksToken.optional,\n  schema: typeof GraphQLSchemaToken.optional,\n  resolvers: typeof ApolloClientResolversToken.optional,\n  defaultOptions: typeof ApolloClientDefaultOptionsToken.optional,\n};\n\ntype InitApolloClientType = (\n  ctx: Context,\n  initialState: mixed\n) => ApolloClient<mixed>;\n\nfunction Container() {}\n\nconst ApolloClientPlugin: FusionPlugin<\n  ApolloClientDepsType,\n  InitApolloClientType\n> = createPlugin({\n  deps: {\n    getCache: GetApolloClientCacheToken.optional,\n    endpoint: GraphQLEndpointToken.optional,\n    fetch: FetchToken,\n    includeCredentials: ApolloClientCredentialsToken.optional,\n    apolloContext: ApolloContextToken.optional,\n    getApolloLinks: GetApolloClientLinksToken.optional,\n    schema: GraphQLSchemaToken.optional,\n    resolvers: ApolloClientResolversToken.optional,\n    defaultOptions: ApolloClientDefaultOptionsToken.optional,\n  },\n  provides({\n    getCache = ctx => new InMemoryCache(),\n    endpoint = '/graphql',\n    fetch,\n    includeCredentials = 'same-origin',\n    apolloContext = ctx => ctx,\n    getApolloLinks,\n    schema,\n    resolvers,\n    defaultOptions,\n  }) {\n    function getClient(ctx, initialState) {\n      const cache = getCache(ctx);\n      const connectionLink =\n        schema && __NODE__\n          ? new SchemaLink({\n              schema,\n              context:\n                typeof apolloContext === 'function'\n                  ? apolloContext(ctx)\n                  : apolloContext,\n            })\n          : new HttpLink({\n              uri: endpoint,\n              credentials: includeCredentials,\n              fetch,\n            });\n\n      const links: Array<ApolloLinkType> = getApolloLinks\n        ? getApolloLinks([connectionLink], ctx)\n        : [connectionLink];\n\n      const client = new ApolloClient({\n        ssrMode: __NODE__,\n        connectToDevTools: __BROWSER__ && __DEV__,\n        link: apolloLinkFrom(links),\n        cache: cache.restore(initialState),\n        resolvers,\n        defaultOptions,\n      });\n      return client;\n    }\n    return (ctx: Context, initialState: mixed) => {\n      if (ctx.memoized.has(Container)) {\n        return ctx.memoized.get(Container);\n      }\n      const client = getClient(ctx, initialState);\n      ctx.memoized.set(Container, client);\n      return client;\n    };\n  },\n});\nexport {ApolloClientPlugin};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {DocumentNode} from 'graphql';\nimport ApolloRenderEnhancer from './plugin';\n\nexport * from './tokens.js';\nexport * from './apollo-client/index.js';\n\nexport {ApolloRenderEnhancer};\n\nexport function gql(path: string): DocumentNode {\n  throw new Error('fusion-plugin-apollo/gql should be replaced at build time');\n}\n"],"names":["root","logger","getDataFromTree","catch","e","error","GraphQLSchemaToken","createToken","ApolloContextToken","ApolloCacheContext","React","createContext","GraphQLEndpointToken","ApolloClientToken","getDeps","getApolloClient","renderFn","createPlugin","deps","provides","el","ctx","serverRender","then","middleware","schema","endpoint","apolloContext","renderMiddleware","next","element","initialState","apolloState","document","getElementById","JSON","parse","unescape","textContent","client","cache","GetApolloClientCacheToken","ApolloClientCredentialsToken","ApolloClientDefaultOptionsToken","GetApolloClientLinksToken","ApolloClientResolversToken","Container","ApolloClientPlugin","getCache","optional","fetch","FetchToken","includeCredentials","getApolloLinks","resolvers","defaultOptions","InMemoryCache","getClient","connectionLink","SchemaLink","context","HttpLink","uri","credentials","links","ApolloClient","ssrMode","connectToDevTools","link","apolloLinkFrom","restore","memoized","has","get","set","gql","path","Error"],"mappings":"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"}