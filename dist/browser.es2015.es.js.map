{"version":3,"file":"browser.es2015.es.js","sources":["../src/server.js","../src/client.js","../src/tokens.js","../src/plugin.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env node */\nimport {renderToStringWithData} from 'react-apollo';\nimport {renderToString} from 'react-dom/server';\nimport type {Logger} from 'fusion-tokens';\n\nimport type {Element} from 'react';\n\n// Apollo currently does not have an effective error policy for server side rendering (see https://github.com/apollographql/react-apollo/issues/2680)\n// This render function first tries to use `renderToStringWithData`. If any query in this render function fails, we will catch the error, log it, and\n// fall back to a standard renderToString, which will set the `loading` props of all queries which failed to execute in the first pass to true.\n// This allows us to still render with data in the happy case, and defer to client side rendering if any queries fail. This also acts as a form\n// of retrying from the browser.\nexport default (root: Element<*>, logger?: Logger) => {\n  return renderToStringWithData(root)\n    .catch(e => {\n      logger && logger.error('SSR Failed with Error', e);\n      return renderToString(root);\n    })\n    .then(content => {\n      return `<div id='root'>${content}</div>`;\n    });\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport ReactDOM from 'react-dom';\n\nimport type {Element} from 'react';\n\nexport default (root: Element<*>) => {\n  const domElement = document.getElementById('root');\n\n  if (!domElement) {\n    throw new Error(\"Could not find 'root' element\");\n  }\n\n  ReactDOM.hydrate\n    ? ReactDOM.hydrate(root, domElement)\n    : ReactDOM.render(root, domElement);\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport React from 'react';\nimport {createToken, type Context, type Token} from 'fusion-core';\nimport type {ApolloClient} from 'apollo-client';\n\nexport type InitApolloClientType<TInitialState> = (\n  ctx: Context,\n  initialState: TInitialState\n) => ApolloClient<TInitialState>;\n\n// We should have better flow types for the schema\nexport const GraphQLSchemaToken: Token<any> = createToken('GraphQlSchemaToken');\n\nexport type ApolloContext<T> = Context => T | T;\n\nexport const ApolloContextToken: Token<ApolloContext<mixed>> = createToken(\n  'ApolloContextToken'\n);\n\nexport const ApolloCacheContext = React.createContext<\n  $PropertyType<InitApolloClientType<mixed>, 'cache'>\n>();\n\nexport const GraphQLEndpointToken: Token<string> = createToken(\n  'GraphQLEndpointToken'\n);\n\nexport const ApolloClientToken: Token<\n  InitApolloClientType<mixed>\n> = createToken('ApolloClientToken');\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\nimport React from 'react';\n\nimport {createPlugin, html} from 'fusion-core';\n\nimport {ApolloProvider} from 'react-apollo';\n\nimport type {Context} from 'fusion-core';\nimport {prepare} from 'fusion-react';\n\nimport serverRender from './server';\nimport clientRender from './client';\nimport {LoggerToken} from 'fusion-tokens';\nimport {ApolloServer} from 'apollo-server-koa';\nimport compose from 'koa-compose';\nimport {\n  ApolloContextToken,\n  ApolloCacheContext,\n  GraphQLSchemaToken,\n  GraphQLEndpointToken,\n  ApolloClientToken,\n} from './tokens';\n\nexport type DepsType = {\n  apolloContext: typeof ApolloContextToken.optional,\n  logger: typeof LoggerToken.optional,\n  schema: typeof GraphQLSchemaToken.optional,\n  endpoint: typeof GraphQLEndpointToken.optional,\n  getApolloClient: typeof ApolloClientToken,\n};\n\nexport type ProvidesType = (el: any, ctx: Context) => Promise<any>;\n\nfunction getDeps(): DepsType {\n  if (__NODE__) {\n    return {\n      apolloContext: ApolloContextToken.optional,\n      logger: LoggerToken.optional,\n      schema: GraphQLSchemaToken.optional,\n      endpoint: GraphQLEndpointToken.optional,\n      getApolloClient: ApolloClientToken,\n    };\n  }\n  // $FlowFixMe\n  return {\n    getApolloClient: ApolloClientToken,\n  };\n}\n\nexport default createPlugin<DepsType, ProvidesType>({\n  deps: getDeps(),\n  provides(deps) {\n    return async (el, ctx) => {\n      return prepare(el).then(() => {\n        return __NODE__ ? serverRender(el, deps.logger) : clientRender(el);\n      });\n    };\n  },\n  middleware({\n    schema,\n    endpoint = '/graphql',\n    getApolloClient,\n    apolloContext = ctx => {\n      return ctx;\n    },\n  }) {\n    const renderMiddleware = (ctx, next) => {\n      if (!ctx.element) {\n        return next();\n      }\n      let initialState = null;\n      if (__BROWSER__) {\n        // Deserialize initial state for the browser\n        const apolloState = document.getElementById('__APOLLO_STATE__');\n        if (apolloState) {\n          initialState = JSON.parse(unescape(apolloState.textContent));\n        }\n      }\n      // Create the client and apollo provider\n      const client = getApolloClient(ctx, initialState);\n      ctx.element = (\n        <ApolloCacheContext.Provider value={client.cache}>\n          <ApolloProvider client={client}>{ctx.element}</ApolloProvider>\n        </ApolloCacheContext.Provider>\n      );\n\n      if (__NODE__) {\n        // Serialize state into html on server side render\n        const initialState = client.cache && client.cache.extract();\n        const serialized = JSON.stringify(initialState);\n        const script = html`\n          <script type=\"application/json\" id=\"__APOLLO_STATE__\">\n            ${serialized}\n          </script>\n        `;\n        ctx.template.body.push(script);\n      }\n\n      return next();\n    };\n    if (__NODE__ && schema) {\n      const server = new ApolloServer({\n        schema,\n        // investigate other options\n        context: ({ctx}) => {\n          if (typeof apolloContext === 'function') {\n            return apolloContext(ctx);\n          }\n          return apolloContext;\n        },\n      });\n      let serverMiddleware = [];\n      server.applyMiddleware({\n        // switch to server.getMiddleware once https://github.com/apollographql/apollo-server/pull/2435 lands\n        app: {\n          use: m => {\n            serverMiddleware.push(m);\n          },\n        },\n        // investigate other options\n        path: endpoint,\n      });\n      return compose([...serverMiddleware, renderMiddleware]);\n    } else {\n      return renderMiddleware;\n    }\n  },\n});\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {DocumentNode} from 'graphql';\nimport Plugin from './plugin';\n\nexport * from './tokens.js';\nexport default Plugin;\n\nexport function gql(path: string): DocumentNode {\n  throw new Error('fusion-plugin-apollo/gql should be replaced at build time');\n}\n"],"names":["root","domElement","document","getElementById","Error","ReactDOM","hydrate","render","GraphQLSchemaToken","createToken","ApolloContextToken","ApolloCacheContext","React","createContext","GraphQLEndpointToken","ApolloClientToken","getDeps","getApolloClient","createPlugin","deps","provides","el","ctx","prepare","then","clientRender","middleware","schema","endpoint","apolloContext","renderMiddleware","next","element","initialState","apolloState","JSON","parse","unescape","textContent","client","cache","gql","path"],"mappings":";;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;AASA,AAIA,oBAAgBA,IAAD,IAAsB;QAC7BC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAnB;;MAEI,CAACF,UAAL,EAAiB;UACT,IAAIG,KAAJ,CAAU,+BAAV,CAAN;;;EAGFC,QAAQ,CAACC,OAAT,GACID,QAAQ,CAACC,OAAT,CAAiBN,IAAjB,EAAuBC,UAAvB,CADJ,GAEII,QAAQ,CAACE,MAAT,CAAgBP,IAAhB,EAAsBC,UAAtB,CAFJ;CAPF;;ACbA;;;;;;;AAOA,AASA;AACA,AAAO,MAAMO,kBAA8B,GAAGC,WAAW,CAAC,oBAAD,CAAlD;AAIP,AAAO,MAAMC,kBAA+C,GAAGD,WAAW,CACxE,oBADwE,CAAnE;AAIP,AAAO,MAAME,kBAAkB,GAAGC,KAAK,CAACC,aAAN,EAA3B;AAIP,AAAO,MAAMC,oBAAmC,GAAGL,WAAW,CAC5D,sBAD4D,CAAvD;AAIP,AAAO,MAAMM,iBAEZ,GAAGN,WAAW,CAAC,mBAAD,CAFR;;ACjCP;;;;;;;;;AASA,AAgCA,SAASO,OAAT,GAA6B;SAWpB;IACLC,eAAe,EAAEF;GADnB;;;AAKF,aAAeG,YAAY,CAAyB;EAClDC,IAAI,EAAEH,OAAO,EADqC;;EAElDI,QAAQ,CAACD,IAAD,EAAO;WACN,CAAOE,EAAP,EAAWC,GAAX;qBACEC,OAAO,CAACF,EAAD,CAAP,CAAYG,IAAZ,CAAiB,MACf,AAA2CC,YAAY,CAACJ,EAAD,CADzD,CAAP;MADF;GAHgD;;EASlDK,UAAU,CAAC;IACTC,MADS;IAETC,QAAQ,GAAG,UAFF;IAGTX,eAHS;IAITY,aAAa,GAAGP,GAAG,IACVA;GALD,EAOP;UACKQ,gBAAgB,GAAG,CAACR,GAAD,EAAMS,IAAN,KAAe;UAClC,CAACT,GAAG,CAACU,OAAT,EAAkB;eACTD,IAAI,EAAX;;;UAEEE,YAAY,GAAG,IAAnB;;MACiB;;cAETC,WAAW,GAAGhC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAApB;;YACI+B,WAAJ,EAAiB;UACfD,YAAY,GAAGE,IAAI,CAACC,KAAL,CAAWC,QAAQ,CAACH,WAAW,CAACI,WAAb,CAAnB,CAAf;;OATkC;;;YAahCC,MAAM,GAAGtB,eAAe,CAACK,GAAD,EAAMW,YAAN,CAA9B;MACAX,GAAG,CAACU,OAAJ,GACE,oBAAC,kBAAD,CAAoB,QAApB;QAA6B,KAAK,EAAEO,MAAM,CAACC;SACzC,oBAAC,cAAD;QAAgB,MAAM,EAAED;SAASjB,GAAG,CAACU,OAArC,CADF,CADF;;aAkBOD,IAAI,EAAX;KAhCF;;IAyDO;aACED,gBAAP;;;;CA3EqB,CAA3B;;ACzDA;;;;;;;AAQA,AAKO,SAASW,GAAT,CAAaC,IAAb,EAAyC;QACxC,IAAItC,KAAJ,CAAU,2DAAV,CAAN;;;;;;"}